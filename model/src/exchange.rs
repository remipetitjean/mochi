//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.4

use sea_orm::{entity::prelude::*, QuerySelect, Set};
use serde::{Deserialize, Serialize};
use std::collections::HashSet;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "exchange")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[serde(rename(deserialize = "code"))]
    pub id: String,
    pub name: String,
    pub country: String,
    pub timezone: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

pub struct ExchangeController {}

impl ExchangeController {
    pub async fn insert_many(db: &DbConn, instances: Vec<Model>) -> Result<(), DbErr> {
        let existing_ids: Vec<String> = Entity::find()
            .select_only()
            .column(Column::Id)
            .into_tuple()
            .all(db)
            .await?;

        let existing_ids_set: HashSet<String> =
            HashSet::from_iter(existing_ids.iter().map(|x| x.to_string()));

        let instances: Vec<Model> = instances
            .into_iter()
            .filter(|instance| !existing_ids_set.contains(&instance.id))
            .collect::<Vec<Model>>();

        let active_instances: Vec<ActiveModel> = instances
            .into_iter()
            .map(|instance| ActiveModel {
                id: Set(instance.id.to_owned()),
                name: Set(instance.name.to_owned()),
                country: Set(instance.country.to_owned()),
                timezone: Set(instance.timezone.to_owned()),
                ..Default::default()
            })
            .rev()
            .collect();

        if active_instances.len() > 0 {
            Entity::insert_many(active_instances).exec(db).await?;
        }

        Ok(())
    }
}
